---
layout: post
title:  "Quizz #4: Rails"
---

<h2>Quizz 4 - Rails</h2>

<div class="question">
  How do you create a Rails app?
</div>

```bash
➜
```


<div class="question">
  How do you start coding a Rails project? Give the right sequence.
  <ol>
    <li>Coding the views?</li>
    <li>Coding the controllers?</li>
    <li>Coding the models?</li>
  </ol>
</div>

<div class="answer"></div>


<div class="question">
  How do you generate a <code>Song</code> model with a <code>title</code> and a <code>year</code>?
</div>

```bash
➜
```


<p>What are the 2 created files?</p>

<div class="answer"></div>

<p>
  What is the <strong>rails</strong> command you should type then?
</p>

```bash
➜
```

<div class="question">
  How do you add a <code>category</code> (ex: <code>"rock"</code>, <code>"electro"</code>, etc..) to your songs table using the correct Rails generator?
</div>

```bash
➜
```

<p>What is the created file?</p>

<div class="answer"></div>

<p>
  What is the <strong>rails</strong> command you should type again?
</p>

```bash
➜
```


<div class="question">
  Add a validation on the presence of a song title & crash-test your model in the console
</div>

```ruby
# models/song.rb
class Song < ApplicationRecord
  # Add the validation

end
```


<div style="page-break-after:always;"></div>

Now crash-test your model:

```bash
➜ rails c
pry>
pry>
pry>
pry>
pry>
pry>
pry>
```


<div class="question">
  What is the Rails flow you need to follow again and again? Give the correct order
  <ol>
    <li>The Router is routing the HTTP request to "controller#action"</li>
    <li>The action is getting data from models</li>
    <li>Everything starts with an HTTP Request</li>
    <li>The action is rendering the view</li>
  </ol>
</div>

<div class="answer"></div>


<div class="question">
  What are the <strong>4 different parts</strong> inside an HTTP request?
</div>

<div class="answer big">
<ol>
  <li></li>
  <li></li>
  <li></li>
  <li></li>
</ol>
</div>


<div class="question">
  Are the HTTP requests in the following 2 routes the same? Why?
</div>

```ruby
# config/routes.rb
get "/songs" => "songs#index"
post "/songs" => "songs#create"
```

<div class="answer">

</div>

<div class="question">
  What's the difference between a <strong>GET</strong> and a <strong>POST</strong> request?
</div>

<div class="answer big">

</div>


<div class="question">
  Complete the controller code using the correct <code>params</code> key?
</div>

HTTP request:

<pre>
GET /search?query=thriller
</pre>

<div style="page-break-after:always;"></div>

Routing:

```ruby
# config/routes.rb
get "/search" => "songs#search"
```

Controller:

```ruby
class SongsController < ApplicationController
  def search
    # TODO
    @songs =
  end
end
```

<div class="question">
  Complete the controller code using the correct <code>params</code> key?
</div>

HTTP request:

<pre>
GET /songs/named/thriller
</pre>

Routing:

```ruby
# config/routes.rb
get "/songs/named/:name" => "songs#search"
```

Controller:

```ruby
class SongsController < ApplicationController
  def search
    # TODO
    @songs =
  end
end
```

<div class="question">
  What are the 7 CRUD routes generated by the <code>resources</code> method in Rails?
</div>

```ruby
# config/routes.rb
# TODO: Give us the details of the 7 routes generated with:
resources :songs
# HINT: HTTP-verb "url" => "controller#action"





```


<div class="question">
  How do you print your routes and their URL prefix helpers?
</div>

```bash
➜
```


<div class="question">
  How do you generate a controller for your songs?
</div>

```bash
➜
```

<div style="page-break-after:always;"></div>

<div class="question">
  Implement the <strong>R</strong>ead actions in your songs controller?
</div>

```ruby
class SongsController < ApplicationController




end
```


<div class="question">
  What are the 2 requests needed to create a new song? Implement the <code>songs#new</code> and <code>songs#create</code> actions.
</div>

```ruby
class SongsController < ApplicationController
  def new

  end
  def create




  end

  private
  def song_params

  end
end
```


<div class="question">
  Why do we have to filter parameters using "strong params" in the controller?
</div>


<div class="answer big">

</div>



<div class="question">
  <strong>Hard question</strong>: What is the HTML generated?
</div>

```ruby
@song = Song.new
```

Now what is the HTML code generated by:

```erb
<%= form_for @song do |f| %>
  <%= f.text_field :title %>
  <%= f.submit %>
<% end %>
```

Fill the blanks:


```html
<form action="                " method="post">
  <input type="text" name="           " value="           ">
  <input type="submit" value="Create song">
</form>
```

<div style="page-break-after:always;"></div>

<div class="question">
  <strong>Hard question</strong>: What is the HTML generated?
</div>

Imagine that:

```ruby
@song # => <#Song: id: 18, title: "Hey jude", year: 1968, category: "rock">
```

Now what is the HTML code generated by:

```erb
<%= form_for @song do |f| %>
  <%= f.text_field :title %>
  <%= f.submit %>
<% end %>
```

Fill the blanks:

```html
<form action="               " method="patch">
  <input type="text" name="           " value="           ">
  <input type="submit" value="Create song">
</form>
```


<h2>Adding a 2nd model</h2>

<div class="question">
  Now you want to add reviews to your app. Here are some constraints
</div>

<ul>
  <li>We don't want our visitors to destroy or update reviews, just to create ones.</li>
  <li>We don't want a separate index page to list all reviews or a show page to display each review. Instead, we want to display reviews on the show page of each song, for better UX.
  </li>
</ul>

<h3>Step #1: Model</h3>

Generate your <code>Review</code> model in the terminal. It should have only a <code>content:string</code> and a <code>song:references</code> (= the foreign key).

```bash
➜
```

Run the migration
```bash
➜
```

Add validation/associations

<ul>
  <li>Add a validation for the presence of a content</li>
  <li>Add associations between <code>Review</code> and <code>Song</code></li>
</ul>

```ruby
class Song < ApplicationRecord

end
```

```ruby
class Review < ApplicationRecord


end
```

<div style="page-break-after:always;"></div>

<h3>Step #2: Routing/Controller</h3>

Generate the reviews controller

```bash
➜
```


Add the <strong>necessary</strong> routes (don't forget <strong>we don't want the 7 CRUD actions for reviews</strong>)

```ruby
# config/routes.rb
resources :songs do
  # TODO

end
```

Now code your controller:

```ruby
class ReviewsController < ApplicationController
  before_action :set_song

  def new

  end

  def create




  end

  private
  def set_song
    @song = Song.find(params[:song_id])
  end
  def review_params
    params.require(:review).permit(:content)
  end
end
```


<h3>Step #3: Views</h3>
Add a song's reviews on its show page:

```erb
<h1><%= @song.title %></h1>
<p><%= @song.year %></p>
<p><%= @song.category %></p>
<h2>Here are the reviews for this song:</h2>




```
