---
layout: post
title:  "Quizz #4: Rails"
---


<div class="question">
  How do you create a Rails app?
<div>

<pre>
$
</pre>

</br>

<div class="question">
  How do you start a Rails project?
  <ol>
    <li>Coding the views?</li>
    <li>Coding the controllers?</li>
    <li>Coding the models?</li>
  </ol>
<div>

<div class="answer"></div>


<div class="question">
  How do you generate a <code>Song</code> model with a <code>title</code> and a <code>year</code>?
  <p><i>Tell us the 2 files created and the <strong>rake</strong> command you should type then.</i></p>
<div>

<pre>
$
</pre>
<div class="answer big"></div>

<div class="question">
  How do you add a <code>category</code> (ex: <code>"rock"</code>, <code>"electro"</code>, etc..) to your model using the correct Rails generator?
  <p><i>Again, what is the file created and the <strong>rake</strong> command you need to type again?</i></p>
<div>

<pre>
$
</pre>
<div class="answer big"></div>



<div class="question">
  Add a validation on presence of a song title + crash-test your model in the console
<div>
</br>

<pre>
# models/song.rb
class Song < ActiveRecord::Base
  # Add the validation

end
</pre>

</br>

Now crash-test your model:

<pre>
$ rails c
>
>
>
>
>
>
>
</pre>

</br>

<div class="question">
  What is the Rails flow you need to follow again and again? Give the correct order
  <ol>
    <li>The Router is routing the HTTP request to "controller#action"</li>
    <li>The action is getting data from models</li>
    <li>Everything starts with an HTTP Request</li>
    <li>The action is rendering the view</li>
  </ol>
<div>

<div class="answer"></div>


<div class="question">
  What are the <strong>3 important parts</strong> inside a HTTP request?
</div>

<div class="answer big">

</div>


<div class="question">
  Are these 2 routes the same? Why?
</div>

<pre>
# config/routes.rb
get "/songs" => "songs#show"
post "/songs" => "songs#create"
</pre>

<div class="answer">

</div>

<div class="question">
  What's the difference between a <strong>GET</strong> and a <strong>POST</strong> request?
</div>

<div class="answer big">

</div>

<div class="question">
  What are the 7 CRUD routes generated by the <code>resources</code> method in Rails?
</div>

<pre>
# config/routes.rb
# TODO: Give us the details of the 7 routes generated
resources :songs











</pre>

</br>

<div class="question">
  How do you print your routes and their URL prefix helpers?
</div>

<pre>
$
</pre>

</br>

<div class="question">
  How do you generate a controller for your songs?
</div>

<pre>
$
</pre>

</br>

<div class="question">
  Implement the <strong>R</strong>ead actions in your songs controller?
</div>

<pre>
class SongsController < ApplicationController









end
</pre>

</br>

<div class="question">
  What are the 2 requests needed to create a new song? Implement the <code>songs#new</code> and <code>songs#create</code> actions.
</div>

<pre>
class SongsController < ApplicationController
  def new

  end
  def create

  end

  private
  def song_params

  end
end
</pre>

</br>

<div class="question">
  Why do we have to filter parameters using "strong params" in the controller?
</div>


<div class="answer big">

</div>

</br>


<div class="question">
  <strong>Hard question</strong>: What is the HTML generated?
</div>

Imagine that:

<pre>
@restaurant = Song.new
</pre>

Now what is the HTML code generated by:

<pre>
<%= form_for @song do |f| %>
  <%= f.text_field :title %>
  <%= f.submit %>
<% end %>
</pre>

Fill the blanks:


<pre>
&lt;form action="                " method="post"&gt;
  &lt;input type="text" name="           " value="           "&gt;
  &lt;input type="submit" value="Create song"&gt;
&lt;/form&gt;
</pre>

</br>


<div class="question">
  <strong>Hard question</strong>: What is the HTML generated?
</div>

Imagine that:

<pre>
@restaurant # => <#Song: id: 18, title: "Hey jude", year: 1968, category: "rock">
</pre>

Now what is the HTML code generated by:

<pre>
<%= form_for @song do |f| %>
  <%= f.text_field :title %>
  <%= f.submit %>
<% end %>
</pre>

Fill the blanks:

<pre>
&lt;form action="               " method="patch"&gt;
  &lt;input type="text" name="           " value="           "&gt;
  &lt;input type="submit" value="Create song"&gt;
&lt;/form&gt;
</pre>

</br>

<div class="question">
  Now you want to add reviews to your app. Here are some constraints
</div>



</br>

<ul>
  <li>We don't want our visitors to destroy or update reviews, just to create ones.</li>
  <li>We don't want a separate index page to list all reviews or a show page to display each review. Instead, we want to display reviews on the show page of each song, this is a better UX.
  </li>
</ul>

</br>


<h3>Step #1: Model</h3>
Generate you <code>Review</code> model? It should have only a <code>content:string</code> and a <code>song:references</code> (= the foreign key).

<pre>
$
</pre>

Run the migration
<pre>
$
</pre>


Add validation/associations
<ul>
  <li>Add a validation for the presence of a review content</li>
  <li>Add associations between the two models</li>
</ul>

<pre>
class Song < ActiveRecord::Base

end
</pre>

<pre>
class Review < ActiveRecord::Base



end
</pre>

</br>

<h3>Step #2: Routing/Controller</h3>

Generate the reviews controller

<pre>
$
</pre>


An add the necessary routes (don't forget that we don't want the 7 CRUD actions for reviews)

<pre>
# config/routes.rb
resources :songs do
  # TODO

end
</pre>



Now code your controller

<pre>
class ReviewsController < ApplicationController
  before_action :set_song

  def new

  end

  def create





  end

  private
  def set_song
    @song = Song.find(params[:song_id])
  end
  def review_params
    params.require(:song).permit(:content)
  end
end
</pre>


</br>

<h3>Step #3: Views</h3>
Add a song's reviews on its show page:

<pre>
&lt;h1&gt;&lt;%= @song.title %&gt;&lt;/h1&gt;
&lt;p&gt;&lt;%= @song.year %&gt;&lt;/p&gt;
&lt;p&gt;&lt;%= @song.category %&gt;&lt;/p&gt;

&lt;h2&gt;Here are the reviews for this song;&lt;/h2&gt;












</pre>
